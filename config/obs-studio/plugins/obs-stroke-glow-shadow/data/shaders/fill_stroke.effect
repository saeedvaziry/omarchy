uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d stroke_mask;
uniform texture2d stroke_fill_source;
uniform float4 stroke_fill_color;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImageFilterColor(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	float mask_alpha = stroke_fill_color.a * (stroke_mask.Sample(textureSampler, v_in.uv)).a;
	float4 color = image.Sample(textureSampler, v_in.uv);
	
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 fill_l = pow(stroke_fill_color.rgb, gamma);

	float alpha_threshold = 0.01;
	float stroke_alpha = color.a < alpha_threshold ? 1.0f -color.a : 0.0;
	
	float alpha = color.a + (stroke_alpha) * mask_alpha;
	
	return float4(pow(color_rgb_l.rgb * color.a + fill_l.rgb * (stroke_alpha), gamma_i), alpha);
}

float4 mainImageFilterSource(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	
	float4 col = image.Sample(textureSampler, v_in.uv);
	float4 fill_col = stroke_fill_source.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(col.rgb, gamma);
	float3 fill_l = pow(fill_col.rgb, gamma);
	
	float mask_alpha = fill_col.a * (stroke_mask.Sample(textureSampler, v_in.uv)).a;

	float alpha = col.a + (1.0f - col.a) * mask_alpha;

	return float4(pow(color_rgb_l.rgb * col.a + fill_l.rgb * (1.0f - col.a), gamma_i), alpha);
}

float4 mainImageFilterColorInner(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	
	float4 color = image.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 fill_l = pow(stroke_fill_color.rgb, gamma);
	
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a;

	float alpha = clamp(mask_alpha + (1.0f - mask_alpha) * color.a, 0.0f, color.a);
	return float4(pow(fill_l.rgb * mask_alpha + color_rgb_l * (1.0 - mask_alpha), gamma_i), alpha);
}

float4 mainImageFilterSourceInner(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	
	float4 color = image.Sample(textureSampler, v_in.uv);
	float4 fill_col = stroke_fill_source.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 fill_l = pow(fill_col.rgb, gamma);
	
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a;

	float alpha = clamp(mask_alpha + (1.0f - mask_alpha) * color.a, 0.0f, color.a);
	return float4(pow(fill_l.rgb * mask_alpha + color_rgb_l * (1.0 - mask_alpha), gamma_i), alpha);
}

technique FilterColorOuter
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterColor(v_in);
	}
}

technique FilterSourceOuter
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterSource(v_in);
	}
}

technique FilterColorInner
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterColorInner(v_in);
	}
}

technique FilterSourceInner
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterSourceInner(v_in);
	}
}
