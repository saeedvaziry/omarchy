#define EPS 0.000000000001

uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d stroke_mask;
uniform texture2d stroke_fill_source;
uniform float4 stroke_fill_color;
uniform float fill_behind = 0.0;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImageFilterColor(VertData v_in) : TARGET
{
	float4 col = image.Sample(textureSampler, v_in.uv);
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a - fill_behind * col.a;
	return float4(stroke_fill_color.rgb, stroke_fill_color.a * mask_alpha);
}

float4 mainImageFilterSource(VertData v_in) : TARGET
{
	float4 col = image.Sample(textureSampler, v_in.uv);
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a - fill_behind * col.a;
	float4 fill_col = stroke_fill_source.Sample(textureSampler, v_in.uv);
	return float4(fill_col.rgb, fill_col.a * mask_alpha);
}

float4 mainImageFilterColorInner(VertData v_in) : TARGET
{
	float4 col = image.Sample(textureSampler, v_in.uv);
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a * col.a;
	return float4(stroke_fill_color.rgb, stroke_fill_color.a * mask_alpha);
}

float4 mainImageFilterSourceInner(VertData v_in) : TARGET
{
	float4 col = image.Sample(textureSampler, v_in.uv);
	float4 fill_col = stroke_fill_source.Sample(textureSampler, v_in.uv);
	float mask_alpha = (stroke_mask.Sample(textureSampler, v_in.uv)).a * col.a;
	//return stroke_mask.Sample(textureSampler, v_in.uv);
	return float4(fill_col.rgb, fill_col.a * mask_alpha);
}

technique FilterColorOuter
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterColor(v_in);
	}
}

technique FilterSourceOuter
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterSource(v_in);
	}
}

technique FilterColorInner
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterColorInner(v_in);
	}
}

technique FilterSourceInner
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageFilterSourceInner(v_in);
	}
}
