#define THRESHOLD 0.5f
#define EPS 0.000000000001

uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d blur_mask;
uniform texture2d blur_mask_inner;

uniform float2 texel_step;
uniform float stroke_thickness;
uniform float stroke_offset;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
    v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    return v_in;
}

float4 mainImageFilled(VertData v_in) : TARGET
{
    float a = (blur_mask.Sample(textureSampler, v_in.uv)).a;
    float stroke = step(EPS, 1.0 - a);
    return float4(stroke, stroke, stroke, stroke);
}

float4 mainImageOffsetInline(VertData v_in) : TARGET
{
    float a = (blur_mask.Sample(textureSampler, v_in.uv)).a;
    float ratio = 0.5 * stroke_thickness/(stroke_offset+stroke_thickness);
    float stroke = step(EPS, 1.0 - a) - step(ratio, 1.0 - a);
    return float4(stroke, stroke, stroke, stroke);
}

float4 mainImageOffsetSubtract(VertData v_in) : TARGET
{
    float a_outer = (blur_mask.Sample(textureSampler, v_in.uv)).a;
    float a_inner = (blur_mask_inner.Sample(textureSampler, v_in.uv)).a;
    float stroke = step(EPS, 1.0 - a_outer) - step(EPS, 1.0 - a_inner);
    return float4(stroke, stroke, stroke, stroke);
}

technique Filled
{
    pass
    {
        vertex_shader = mainTransform(v_in);
        pixel_shader = mainImageFilled(v_in);
    }
}

technique OffsetInline
{
    pass
    {
        vertex_shader = mainTransform(v_in);
        pixel_shader = mainImageOffsetInline(v_in);
    }
}

technique OffsetSubtract
{
    pass
    {
        vertex_shader = mainTransform(v_in);
        pixel_shader = mainImageOffsetSubtract(v_in);
    }
}
